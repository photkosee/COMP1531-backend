============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-4.19.0-21-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1
collecting ... collected 367 items

httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions FAILED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  5%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName PASSED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration PASSED [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] PASSED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] PASSED [ 11%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember PASSED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId FAILED [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken FAILED  [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken FAILED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken FAILED    [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp PASSED [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent PASSED [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven FAILED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist PASSED [ 32%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken FAILED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation PASSED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple PASSED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers PASSED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid PASSED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate PASSED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful PASSED        [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful PASSED  [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken FAILED            [ 35%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully PASSED [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember PASSED      [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken FAILED              [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 37%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm PASSED           [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken FAILED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent PASSED [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent PASSED  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven FAILED [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval PASSED      [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm PASSED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm PASSED [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId PASSED              [ 41%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken FAILED             [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken FAILED     [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique PASSED [ 43%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testInvalidToken FAILED   [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage PASSED     [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost PASSED    [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel PASSED   [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] PASSED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken FAILED     [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage PASSED   [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost PASSED  [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm PASSED      [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] PASSED [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken FAILED   [ 53%]
httpTests/otherTests/test_clear.py::testClearWorks PASSED                [ 66%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll PASSED    [ 74%]
httpTests/otherTests/test_users_all.py::testInvalidToken FAILED          [ 75%]
httpTests/userTests/test_user_profile.py::testUserProfileValid PASSED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken FAILED        [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 97%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 97%]

====== Marks recorded: 79.70 ======


=================================== FAILURES ===================================
____________________________ testCanHaveTwoSessions ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='4723643566', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.overrideMarks(2)
    def testCanHaveTwoSessions(userWoody, ctx):
        session2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        # succeeds
        assert userProfile(session2['token'], userWoody.uId, ctx) == userProfile(userWoody.token, userWoody.uId, ctx)
    
        assert authLogout(session2['token'], ctx) == {}
    
        with pytest.raises(AccessError):
            # should now fail...
>           userProfile(session2['token'], userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_login.py:32: Failed
_______________________ testGlobalOwnerMemberCanAddowner _______________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='1625681207', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    def testGlobalOwnerMemberCanAddowner(userBuzz, woodysPublicToybox, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='5120944615', handleStr='sheriffwoody')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelDetails(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_details.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:23: in channelDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='2544341526', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelDetails(userWoody.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_details.py:46: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='2094560496', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='9705547846', handleStr='buzzlightyear')
ctx = None

    def testInvalidatedToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_invite.py:58: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1147242052', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_leave.py:35: Failed
_____________________ testAccessErrorWhenInvalidTokenGiven _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='2575884960', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    def testAccessErrorWhenInvalidTokenGiven(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_messages.py:101: Failed
______________________ testGlobalOwnerMmberCanRemoveOwner ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='1097625165', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='1533888183', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=3, token='6582502554', handleStr='buzzlightyear')
ctx = None

    def testGlobalOwnerMmberCanRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
        channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
>       channelRemoveowner(userZerg.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='9303751967', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsCreate(userWoody.token, 'literally anything', True, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_create.py:40: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1496013310', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_list.py:53: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='4336616829', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsListall(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_listall.py:44: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1413113657', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dmId=4125)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmDetails(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/dmTests/test_dm_details.py:43: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1030300609', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dmId=1020)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmLeave(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/dmTests/test_dm_leave.py:37: Failed
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1425784760', handleStr='sheriffwoody')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f45cf8b8550>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
>       dm_1 = dmFactory(userWoody, [])

httpTests/dmTests/test_dm_list.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='7153794321', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/dmTests/test_dm_list.py:43: Failed
_____________________ testAccessErrorWhenInvalidTokenGiven _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1175148805', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dmId=1511)
ctx = None

    def testAccessErrorWhenInvalidTokenGiven(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/dmTests/test_dm_messages.py:94: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1513317673', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dmId=1653)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/dmTests/test_dm_remove.py:56: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1373989652', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f45cf8b3550>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageEdit(userWoody.token, aMsg.messageId, 'hi', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_edit.py:116: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1200206277', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f45cf864f70>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageRemove(userWoody.token, aMsg.messageId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_remove.py:75: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1535077607', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageSend(userWoody.token, woodysPublicToybox.channelId, 'AccessError nooooooooo', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_send.py:44: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='7288335928', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dmId=8832)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'AccessError nooooooooo', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_senddm.py:45: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='9141721657', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           usersAll(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/otherTests/test_users_all.py:29: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='1646645704', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfile(userWoody.token, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile.py:32: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='2535769996', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSetemail(userWoody.token, userWoody.email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:37: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='9186996979', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSethandle(userWoody.token, userWoody.handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:37: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6714345379', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setname.py:34: Failed
=============================== warnings summary ===============================
../../../../../../usr/lib/python3/dist-packages/blinker/base.py:93
  /usr/lib/python3/dist-packages/blinker/base.py:93: DeprecationWarning: invalid escape sequence \*
    """Connect *receiver* to signal events sent by *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:161
  /usr/lib/python3/dist-packages/blinker/base.py:161: DeprecationWarning: invalid escape sequence \*
    """Connect the decorated function as a receiver for *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:242
  /usr/lib/python3/dist-packages/blinker/base.py:242: DeprecationWarning: invalid escape sequence \*
    """Emit this signal on behalf of *sender*, passing on \*\*kwargs.

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - Faile...
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
FAILED httpTests/channelTests/test_channel_details.py::testInvalidChannelId
FAILED httpTests/channelTests/test_channel_details.py::testInvalidToken - Fai...
FAILED httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - ...
FAILED httpTests/channelTests/test_channel_leave.py::testInvalidToken - Faile...
FAILED httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_list.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
FAILED httpTests/dmTests/test_dm_details.py::testInvalidToken - Failed: DID N...
FAILED httpTests/dmTests/test_dm_leave.py::testInvalidToken - Failed: DID NOT...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - httpTests.e...
FAILED httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Failed: DID ...
FAILED httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven
FAILED httpTests/dmTests/test_dm_remove.py::testInvalidToken - Failed: DID NO...
FAILED httpTests/messageTests/test_message_edit.py::testInvalidToken - Failed...
FAILED httpTests/messageTests/test_message_remove.py::testInvalidToken - Fail...
FAILED httpTests/messageTests/test_message_send.py::testInvalidToken - Failed...
FAILED httpTests/messageTests/test_message_senddm.py::testInvalidToken - Fail...
FAILED httpTests/otherTests/test_users_all.py::testInvalidToken - Failed: DID...
FAILED httpTests/userTests/test_user_profile.py::testInvalidToken - Failed: D...
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - ...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - F...
=========== 26 failed, 158 passed, 183 skipped, 3 warnings in 12.48s ===========
